[biolite] timestamp=2018-03-21 12:54:29
rsem-synthesis-reference-transcripts rsem_eval.temp/rsem_eval 0 0 0 /gpfs/scratch/aguang/treeinform/ms_treeinform/data/revisions/trinity/scratch/transcriptome-2/SRX288285.fa
Transcript Information File is generated!
Group File is generated!
Extracted Sequences File is generated!

rsem-preref rsem_eval.temp/rsem_eval.transcripts.fa 1 rsem_eval.temp/rsem_eval
Refs.makeRefs finished!
Refs.saveRefs finished!
rsem_eval.temp/rsem_eval.idx.fa is generated!
rsem_eval.temp/rsem_eval.n2g.idx.fa is generated!

bowtie-build -f rsem_eval.temp/rsem_eval.n2g.idx.fa rsem_eval.temp/rsem_eval
Settings:
  Output files: "rsem_eval.temp/rsem_eval.*.ebwt"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 5 (one in 32)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  rsem_eval.temp/rsem_eval.n2g.idx.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 10111
Using parameters --bmax 7584 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 7584 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 5777 (target: 7583)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6274
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6275
Getting block 2 of 7
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2272
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2273
Getting block 3 of 7
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6157
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6158
Getting block 4 of 7
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6365
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6366
Getting block 5 of 7
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 5310
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 5311
Getting block 6 of 7
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6655
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6656
Getting block 7 of 7
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 7406
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7407
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 12888
fchr[G]: 20386
fchr[T]: 27440
fchr[$]: 40445
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4206420 bytes to primary EBWT file: rsem_eval.temp/rsem_eval.1.ebwt
Wrote 5060 bytes to secondary EBWT file: rsem_eval.temp/rsem_eval.2.ebwt
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 40445
    bwtLen: 40446
    sz: 10112
    bwtSz: 10112
    lineRate: 6
    linesPerSide: 1
    offRate: 5
    offMask: 0xffffffe0
    isaRate: -1
    isaMask: 0xffffffff
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 1264
    offsSz: 5056
    isaLen: 0
    isaSz: 0
    lineSz: 64
    sideSz: 64
    sideBwtSz: 56
    sideBwtLen: 224
    numSidePairs: 91
    numSides: 182
    numLines: 182
    ebwtTotLen: 11648
    ebwtTotSz: 11648
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 10111
Using parameters --bmax 7584 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 7584 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 8; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 6740 (target: 7583)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 6
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6698
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6699
Getting block 2 of 6
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6024
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6025
Getting block 3 of 6
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 7022
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7023
Getting block 4 of 6
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6695
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6696
Getting block 5 of 6
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 7308
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7309
Getting block 6 of 6
  Reserving size (7584) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6693
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6694
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 12888
fchr[G]: 20386
fchr[T]: 27440
fchr[$]: 40445
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4206420 bytes to primary EBWT file: rsem_eval.temp/rsem_eval.rev.1.ebwt
Wrote 5060 bytes to secondary EBWT file: rsem_eval.temp/rsem_eval.rev.2.ebwt
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 40445
    bwtLen: 40446
    sz: 10112
    bwtSz: 10112
    lineRate: 6
    linesPerSide: 1
    offRate: 5
    offMask: 0xffffffe0
    isaRate: -1
    isaMask: 0xffffffff
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 1264
    offsSz: 5056
    isaLen: 0
    isaSz: 0
    lineSz: 64
    sideSz: 64
    sideBwtSz: 56
    sideBwtLen: 224
    numSidePairs: 91
    numSides: 182
    numLines: 182
    ebwtTotLen: 11648
    ebwtTotSz: 11648
    reverse: 0
Total time for backward call to driver() for mirror index: 00:00:00

bowtie -q --phred33-quals -n 2 -e 99999999 -l 25 -I 1 -X 1000 -p 8 -a -m 200 -S rsem_eval.temp/rsem_eval -1 /gpfs/scratch/aguang/treeinform/ms_treeinform/data/revisions/trinity/scratch/transcriptome-2/filtered.0.fq -2 /gpfs/scratch/aguang/treeinform/ms_treeinform/data/revisions/trinity/scratch/transcriptome-2/filtered.1.fq | samtools view -S -b -o rsem_eval.temp/rsem_eval.bam -
# reads processed: 64305
# reads with at least one reported alignment: 63889 (99.35%)
# reads that failed to align: 416 (0.65%)
Reported 68383 paired-end alignments to 1 output stream(s)

rsem-parse-alignments rsem_eval.temp/rsem_eval rsem_eval.temp/rsem_eval rsem_eval.stat/rsem_eval b rsem_eval.temp/rsem_eval.bam -t 3 -tag XM
Done!

rsem-build-read-index 32 1 0 rsem_eval.temp/rsem_eval_alignable_1.fq rsem_eval.temp/rsem_eval_alignable_2.fq
Build Index rsem_eval.temp/rsem_eval_alignable_1.fq is Done!
Build Index rsem_eval.temp/rsem_eval_alignable_2.fq is Done!

rsem-eval-run-em rsem_eval.temp/rsem_eval 3 rsem_eval rsem_eval.temp/rsem_eval rsem_eval.stat/rsem_eval 0.660424231913155 0.000450153681088881 261 0 -p 8
Refs.loadRefs finished!
Thread 0 : N = 8297, NHit = 8547
Thread 1 : N = 8280, NHit = 8547
Thread 2 : N = 8238, NHit = 8547
Thread 3 : N = 8280, NHit = 8547
Thread 4 : N = 7836, NHit = 8547
Thread 5 : N = 7665, NHit = 8547
Thread 6 : N = 7673, NHit = 8547
DAT 0 reads left
Thread 7 : N = 7620, NHit = 8554
EM_init finished!
estimateFromReads, N0 finished.
estimateFromReads, N1 finished.
ROUND = 1, SUM = 64305, bChange = 13.7728, totNum = 18
ROUND = 2, SUM = 64305, bChange = 0.164041, totNum = 17
ROUND = 3, SUM = 64305, bChange = 0.0945779, totNum = 15
ROUND = 4, SUM = 64305, bChange = 0.0972194, totNum = 12
ROUND = 5, SUM = 64305, bChange = 0.0940253, totNum = 9
ROUND = 6, SUM = 64305, bChange = 0.0903547, totNum = 8
ROUND = 7, SUM = 64305, bChange = 0.086116, totNum = 6
ROUND = 8, SUM = 64305, bChange = 0.0814151, totNum = 6
ROUND = 9, SUM = 64305, bChange = 0.0763737, totNum = 6
ROUND = 10, SUM = 64305, bChange = 0.0711007, totNum = 6
ROUND = 11, SUM = 64305, bChange = 0.065699, totNum = 6
ROUND = 12, SUM = 64305, bChange = 0.0602541, totNum = 6
ROUND = 13, SUM = 64305, bChange = 0.0548736, totNum = 6
ROUND = 14, SUM = 64305, bChange = 0.0496383, totNum = 6
ROUND = 15, SUM = 64305, bChange = 0.0446166, totNum = 6
ROUND = 16, SUM = 64305, bChange = 0.0398631, totNum = 6
ROUND = 17, SUM = 64305, bChange = 0.0354178, totNum = 6
ROUND = 18, SUM = 64305, bChange = 0.0313069, totNum = 6
ROUND = 19, SUM = 64305, bChange = 0.0275435, totNum = 6
ROUND = 20, SUM = 64305, bChange = 0.0241297, totNum = 6
ROUND = 21, SUM = 64305, bChange = 0.0210584, totNum = 6
ROUND = 22, SUM = 64305, bChange = 0.0183154, totNum = 6
ROUND = 23, SUM = 64305, bChange = 0.0158816, totNum = 6
ROUND = 24, SUM = 64305, bChange = 0.0137344, totNum = 6
ROUND = 25, SUM = 64305, bChange = 0.0118498, totNum = 6
ROUND = 26, SUM = 64305, bChange = 0.0102028, totNum = 6
ROUND = 27, SUM = 64305, bChange = 0.00876905, totNum = 6
ROUND = 28, SUM = 64305, bChange = 0.00752514, totNum = 6
ROUND = 29, SUM = 64305, bChange = 0.00644903, totNum = 5
ROUND = 30, SUM = 64305, bChange = 0.00552042, totNum = 4
ROUND = 31, SUM = 64305, bChange = 0.00472081, totNum = 3
ROUND = 32, SUM = 64305, bChange = 0.00403357, totNum = 3
ROUND = 33, SUM = 64305, bChange = 0.00344384, totNum = 3
ROUND = 34, SUM = 64305, bChange = 0.00293849, totNum = 3
ROUND = 35, SUM = 64305, bChange = 0.00250593, totNum = 2
ROUND = 36, SUM = 64305, bChange = 0.00213607, totNum = 2
ROUND = 37, SUM = 64305, bChange = 0.00182008, totNum = 2
ROUND = 38, SUM = 64305, bChange = 0.00155031, totNum = 1
ROUND = 39, SUM = 64305, bChange = 0.00132015, totNum = 1
ROUND = 40, SUM = 64305, bChange = 0.00112388, totNum = 1
ROUND = 41, SUM = 64305, bChange = 0.000956591, totNum = 0
Expression Results are written!
ces is created.
Calculating assembly priors.
Assembly priors are calculated!
Calculating maximum data likelihood in log space.
Maximum data likelihood is calculated!
Calculating data likelihood in log space.
Data likelihood is calculated!
Calculating correction score.
Correction score is calculated!
score is written.
Time Used for EM.cpp : 0 h 00 m 02 s

rm -rf rsem_eval.temp

